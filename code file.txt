import streamlit as st
import pandas as pd
import math
from pulp import LpProblem, LpMinimize, LpVariable, lpSum, LpInteger, value

st.set_page_config(page_title="Transport Route Optimizer", page_icon="üöõ")
st.title("üöõ Transport Route Optimizer (Linear Programming)")

# Upload Excel file
uploaded_file = st.file_uploader("Upload your transport route Excel file", type=["xlsx"])

if uploaded_file:
    # Read routes data
    data = pd.read_excel(uploaded_file, sheet_name="Routes")
    st.success("‚úÖ File loaded successfully!")
    st.dataframe(data)

    # User inputs
    fleet_size = st.number_input(
        "Enter available company fleet size (number of trucks)",
        min_value=1, value=10, step=1)
    work_days = st.number_input(
        "Enter number of working days per month", 
        min_value=1, max_value=31, value=26, step=1)

    # Pre-calc baseline cost (all trips by 3PL)
    baseline_cost = sum(data['Monthly_Demand'] * data['3PL_Cost'].astype(float))

    # Build Linear Programming model
    model = LpProblem("Transport_Cost_Minimization", LpMinimize)

    # Decision variables
    company_vars, pl3_vars, trucks_vars = {}, {}, {}
    for _, row in data.iterrows():
        key = (row['From'], row['To'])
        trucks_vars[key] = LpVariable(f"Trucks_{row['From']}_{row['To']}", lowBound=0, upBound=fleet_size, cat=LpInteger)
        company_vars[key] = LpVariable(f"CompTrips_{row['From']}_{row['To']}", lowBound=0, cat=LpInteger)
        pl3_vars[key] = LpVariable(f"PL3Trips_{row['From']}_{row['To']}", lowBound=0, cat=LpInteger)

    # Objective: minimize total cost
    model += lpSum(
        company_vars[key] * (row['Company_Cost'] + row['Return_Empty_Cost']) + pl3_vars[key] * float(row['3PL_Cost'])
        for _, row in data.iterrows() for key in [(row['From'], row['To'])]
    )

    # Constraint: total trucks ‚â§ fleet size
    model += lpSum(trucks_vars.values()) <= fleet_size, "TotalFleet"

    # Per-route constraints
    for _, row in data.iterrows():
        key = (row['From'], row['To'])
        demand = row['Monthly_Demand']
        duration = row['Trip_Duration_Days']
        max_trips = math.floor(work_days / duration)
        # satisfy demand
        model += company_vars[key] + pl3_vars[key] >= demand, f"Demand_{key}"
        # high-demand coverage
        if demand > 20:
            model += company_vars[key] >= 0.5 * demand, f"HighDem_{key}"
        # capacity
        model += company_vars[key] <= trucks_vars[key] * max_trips, f"Cap_{key}"

    # Solve
    if st.button("Run Optimization üöÄ"):
        model.solve()
        opt_cost = value(model.objective)
        # Calculate reduction
        reduction_pct = (baseline_cost - opt_cost) / baseline_cost * 100 if baseline_cost>0 else 0

        # Gather results
        results = []
        for _, row in data.iterrows():
            key = (row['From'], row['To'])
            results.append({
                "From": row['From'], "To": row['To'],
                "Trucks_Assigned": int(trucks_vars[key].varValue),
                "Company_Trips": int(company_vars[key].varValue),
                "3PL_Trips": int(pl3_vars[key].varValue)
            })
        result_df = pd.DataFrame(results)

        st.subheader("üìä Optimization Results")
        st.dataframe(result_df)
        st.markdown(f"**üí∞ Total Cost:** SAR {opt_cost:,.2f}")
        st.markdown(f"**üìâ Cost Reduction:** {reduction_pct:.1f}% vs. all-3PL baseline")
        # Enforce reduction ‚â•40%
        if reduction_pct >= 40:
            st.success("‚úÖ Achieved at least 40% cost reduction!")
        else:
            st.warning("‚ö†Ô∏è Cost reduction less than 40% ‚Äî consider adjusting constraints or fleet size.")
else:
    st.info("üìé Please upload the Excel file 'Routes' sheet to begin.")
